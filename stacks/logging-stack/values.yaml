elasticsearch:
  replicas: 1

  lifecycle:
    postStart:
      exec:
        command:
          - bash
          - -c
          - |
            while [[ "$(curl -k -u 'elastic:prisma' -s -o /dev/null -w '%{http_code}\n' https://localhost:9200)" != "200" ]]; do
              sleep 1
            done
            curl -k -u 'elastic:prisma' -X PUT "https://localhost:9200/logstash-*/_settings?pretty" -H 'Content-Type: application/json' -d'
            {
              "index" : {
                "number_of_replicas" : 0
              }
            }
            '

  secret:
    enabled: true
    password: "prisma"

  volumeClaimTemplate:
    storageClassName: "openebs-zfspv"
    accessModes: ["ReadWriteOnce"]
    resources:
      requests:
        storage: 60

  resources:
    requests:
      cpu: "500m"
      memory: 1Gi

  image: localhost:5000/docker.elastic.co/elasticsearch/elasticsearch
  imageTag: 8.5.1
  imagePullPolicy: IfNotPresent

  extraVolumes:
    - name: elasticsearch-snapshots
      hostPath:
        path: /prisma/root/backups/elasticsearch_snapshots
        type: Directory

  extraVolumeMounts:
    - name: elasticsearch-snapshots
      mountPath: /mnt/snapshots

  service:
    type: LoadBalancer
    loadBalancerIP: 10.10.$SUBNET_OCTET.105

  extraEnvs:
    - name: path.repo
      value: "/mnt/snapshots"

kibana:
  kibanaConfig:
    kibana.yml: |
      server.port: 5601
      server.publicBaseUrl: "http://localhost:5601/kibana"
      server.host: "localhost"
      server.basePath: "/kibana"
      server.rewriteBasePath: true
  healthCheckPath: "/kibana/app/kibana"
  resources:
    requests:
      cpu: "300m"
      memory: "2Gi"

  image: localhost:5000/docker.elastic.co/kibana/kibana
  imageTag: 8.5.1
  imagePullPolicy: IfNotPresent

logstash:
  logstashConfig:
    logstash.yml: |
      http.host: 0.0.0.0
      xpack.monitoring.enabled: true
      xpack.monitoring.elasticsearch.username: elastic
      xpack.monitoring.elasticsearch.password: prisma
      xpack.monitoring.elasticsearch.hosts: ["https://elasticsearch-master:9200"]
      xpack.monitoring.elasticsearch.ssl.certificate_authority: /usr/share/logstash/config/certs/ca.crt

  logstashPipeline:
    logstash.conf: |
      input {
        beats {
          port => 5044
        }

        http {
          port => 8080
          codec => "json"
          response_headers => {
            "Access-Control-Allow-Origin" => "*"
            "Access-Control-Allow-Methods" => "GET, POST, OPTIONS"
            "Access-Control-Allow-Headers" => "Origin, X-Requested-With, Content-Type, Accept"
          }
        }
      }

      filter {
        if [host] and ![userAgent] {
          mutate {
            add_field => { "source" => "filebeat" }
          }
        } else if [userAgent] {
          mutate {
            rename => { "host" => "client_host" }
            add_field => { "source" => "browser" }
          }
        }
      }

      output { elasticsearch {
        hosts => ["https://elasticsearch-master:9200"]
        cacert => "/usr/share/logstash/config/certs/ca.crt"
        user => 'elastic'
        password => 'prisma'
        index => "logstash-logs-%{+YYYY.MM.dd}"
        }
      }

  secretMounts:
    - name: elasticsearch-master-certs
      secretName: elasticsearch-master-certs
      path: /usr/share/logstash/config/certs

  service:
    type: NodePort
    labels: 
      app: logstash
    ports:
      - name: beats
        port: 5044
        protocol: TCP
        targetPort: 5044
        nodePort: 30444
      - name: http
        port: 8080
        protocol: TCP
        targetPort: 8080
        nodePort: 30888

  image: localhost:5000/docker.elastic.co/logstash/logstash
  imageTag: 8.5.1
  imagePullPolicy: IfNotPresent

filebeat:
  filebeatConfig:
    filebeat.yml: |
      - type: filestream
      paths:
        - /var/log/syslog
        - /var/log/auth.log
      symlinks: true
      processors:
        - add_host_metadata:
            netinfo.enabled: true
        - add_fields:
            target: ''
            fields:
              type: syslog

      filebeat.autodiscover:
        providers:
          - type: kubernetes
            hints.enabled: true

            hints.default_config:
              type: container
              paths:
                - /var/log/containers/*${data.kubernetes.container.id}.log

      output.logstash:
        hosts: ["logstash-logstash:5044"]

  resources:
      requests:
        cpu: "200m"
        memory: "200Mi"
      limits:
        cpu: "1000m"
        memory: "1Gi"

  tolerations:
    - key: ""
      operator: "Exists"
      effect: "NoSchedule" 

  image: localhost:5000/docker.elastic.co/beats/filebeat
  imageTag: 8.5.1
  imagePullPolicy: IfNotPresent
  
eventexporter:
  config:
    logLevel: info 
    logFormat: json 
    receivers:
      - name: "dump"
        file:
          path: "/dev/stdout"
          layout: 
            message: "{{ .Message }}"
            reason: "{{ .Reason }}"
            type: "{{ .Type }}"
            count: "{{ .Count }}"
            kind: "{{ .InvolvedObject.Kind }}"
            name: "{{ .InvolvedObject.Name }}"
            namespace: "{{ .Namespace }}"
            component: "{{ .Source.Component }}"
            host: "{{ .Source.Host }}"
    route:
      routes:
        - match:
            - receiver: "dump"  
          types: 
            - Normal
            - Warning
            - Error

  image:
    registry: localhost:5000
    repository: bitnami/kubernetes-event-exporter
    tag: 1.7.0-debian-12-r12
    pullPolicy: IfNotPresent