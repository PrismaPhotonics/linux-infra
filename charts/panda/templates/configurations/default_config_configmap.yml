apiVersion: v1
kind: ConfigMap
metadata:
  name: prisma-config
data:
  default_config.py: |
      import datetime
      import os

      # ----------------------------------------- Prisma Master Configuration ----------------------------------------
      
      class ConfigMeta(type):
          @property
          @classmethod
          def electricity_pole_config(cls):
              from algo_configs import electricity_pole_default_config
              return electricity_pole_default_config
      
          @property
          @classmethod
          def gas_sensing_config(cls):
              from algo_configs import default_gas_sensing_config
              return default_gas_sensing_config
      
          @property
          @classmethod
          def perimeter_sensing_config(cls):
              from algo_configs import default_perimeter_sensing_config
              return default_perimeter_sensing_config
      
      
      class Config(metaclass=ConfigMeta):
          class Backoffice:
              backoffice_port = 8050
              drives_blacklist = ["C:\\", "I:\\"]

      class Broker:
          #broker_server = 'rabbitmq-panda-0.rabbitmq-panda-headless.default.svc.cluster.local' #'localhost'
          broker_server = 'data-rabbitmq.prismaphotonics.net'
          broker_port = 5671
          broker_protocol = 'amqps'
          exchange_name = 'prisma'
          heartbeat = 600
          blocked_connection_timeout = 300
          username = 'prisma'
          password = 'pass' 
          prefetch_count = 35
          reconnect_attempts = 60
          reconnect_timeout = 1
          tls = True

          class ManagementAPI:
              mgmt_port = 15671

      class Player:
          num_msgs_between_info = 5
          throttling_min_trigger = 100
          throttling_max_trigger = 200
          throttling_check_status = 100
          throttling_sleep = 5

      class QueueThrottle:
          throttling_min_trigger = 10
          throttling_max_trigger = 50
          throttling_check_status = 10
          throttling_sleep = 1

      class Recorder:
          recording_chunks_per_file = 40

      class SmartRecorder:
          class Cumsum:
              f_pass = 20
              f_stop = 5

          class Decimation:
              x = 5
              t = 8

      class Mongo:
          schema = 'mongodb'
          host_name = 'mongodb'
          mongo_port = 27017
          db_name = 'Alerts'
          run_collection = 'Runs'
          algorun_collection = 'Algoruns'
          monitoring_metrics_db_name = 'MonitoringMetrics'
          rec_mapper_db_name = 'prisma'
          authentication_db_name_for_mongo = 'prisma'
          mongo_hardcoded_user = 'prisma'
          mongo_hardcoded_password = 'pass'
  
          url = f"{schema}://{mongo_hardcoded_user}:{mongo_hardcoded_password}@{host_name}:{mongo_port}/"

      class AnnotationDB:
          user = 'select_only_user'
          password = 'pass'
          host = 'annotations.prismaphotonics.net'
          database = 'prisma_projects'
          truth_table = 'truth_table'
          truth_table_raw = 'truth_table_raw'
          subclass_table = 'subclass'

      class NetworkDrives:
          _drives = ['prisma_server1', 'pz_nas', 'prisma_red1']
          prisma_server1 = r'\\prisma-server1\Data'
          pz_nas = r'\\10.50.0.52\Public'
          prisma_red1 = r'\\prisma-red1\Data'

      LocalDrives = NetworkDrives()

      class Logging:
          log_dir = os.path.join(os.environ['PRISMA_LOGS'])
          backup_count = 7
          hierarchical_logs = False

      class SupervisorClient:
          timeout = 2
          keepalive_interval = 5

      class RPC:
          server_startup_timeout = 5


      class RESTfulClient:
          rest_username = 'prisma'
          rest_password = 'pass'
          alert_url = 'http://localhost:2202/api/'
          post_via = 'amqp' # or 'http'


      class Externalizer(RESTfulClient):
          """
              Wake up every one minute and call grouping and policy methods with alerts from the last ten minutes:
          """
          post_external_alerts = True
          dump_dead_alerts_window_seconds = 60 * 60 * 2
          history_time_window_seconds = 60 * 10
          kill_zombie_alerts_seconds = 60 * 5
          wakeup_period_sec = 60
          collection_name = 'pulse-alert'
          send_inner_external_alerts = False

          """
              run_mode - 'offline' or 'online' or 'offline_all', when configured to 'offline' - read alerts only from
              mongoDB, when 'online' is configured - read the alerts in the history_time_window_seconds window from the
              mongoDB and then continue to collect alerts from the message bus.
              
              When configured to 'offline' - externalizer reads alerts that happened between offline_alerts_start_time
              and offline_alerts_end_time, in batches of wakeup_period_sec seconds, just like it does when configured
              to 'online'.
              
              When 'offline_all' was configured - externalizer will read *all* the alerts between start and end times
              at once.
                             
          """
          run_mode = 'online'
  
          # used when run mode is 'offline' or 'offline_all':
          offline_alerts_start_time = datetime.datetime(2021, 5, 25, 0, 0, 0)
          offline_alerts_end_time = datetime.datetime(2021, 5, 26, 0, 0, 0)
  
          # trust algorithms and automatically mark is_external=True alerts as external alerts:
          forward_is_external = True
          external_scores = [0, 1, 2, 3]
          mapview_clear_endpoint = ''
          mars_address_url = 'http://localhost:3010/'
          mars_small_interval_sec = 3
          mars_big_interval_sec = 60
          mars_fiber_inspector_alert_timeout = datetime.timedelta(minutes=5)
          segments_path = r'%PRISMA_CONFIG%\mars\segments_m.xlsx'
          enable_mapview_fibercut = True
          enable_mars_fibercut = True
          bulk_alerts_broker_uri = None

          class StatusSender:
              default_message_interval = 30
              endpoint = 'updateSystemInfo/'

      class RunAlgo:
          heartbeat_sec = 10

      class Storage:
          storage_conf = '/home/prisma/pz/config/storage_manager/storage.yaml'

      class Recording:
          class AWG:
              digitizer_samprate = 180e6
              bandwidth = 180e6
              class TxSig:
                  prr = 1000
                  class comb:
                      Amp = [1, 0.64, 0.59, 0.51, 0.445, 0.43, 0.39, 0.355, 0.355, 0.365, 0.375, 0.39, 0.41, 0.44, 0.48, 0.60, 0.72, 0.95]
                      nCarriers = len(Amp)
                      Width = 200e-9
                      prepulse_time = 200E-9
                      prepulse_freq = 450E6
                      F0_Hz = -85E6
                      F_center = 285E6
                      Order = [17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
                      channelizer_filter_file_path = None

              class trig:
                  TriggStartLocation = 0.02
                  delay_ns = 10e-9

              class internal:
                  AOM1delay = 0
                  AOM3delay = 0
                  clockPhase = 0.5
                  trigShift = 0

      class Peripherals:
          clock = 1080e6
          continuous = True
          ch1V = 300
          awg_use_bin_file = False
          _prisma_config = os.getenv('PRISMA_CONFIG')
          awg_folder = os.path.join(_prisma_config, 'sense', 'awg')
          awg_bin_file_name = 'SPCM_AWGData.bin'
          # The following filed [awg_bin_file_path] is used as an input path when awg_use_bin_file is True, used as an output path when awg_save_bin_file is True
          # In case both are set to True, awg_bin_file_path will be used as an output path first, and then as an input path after the file is created.
          # awg_bin_file_path should include the file name
          awg_bin_file_path = os.path.join(awg_folder, awg_bin_file_name)
          awg_save_bin_file = True
          tx_json_file_name = 'tx.json'
          tx_json_file_path = os.path.join(awg_folder, tx_json_file_name)
          # window_coeff_file_name = 'win_coeff.f32'
          # window_coeff_file_path = os.path.join(awg_folder, window_coeff_file_name)
  
          calibration_safety_margin = 0.01
  
          reconnection_tries = 3
          hwid_description = 'VID:PID=0000:0002'

          class EdfaPulse:
              # variable name prefixes are for auto_config
              # effective parameters represent this variable as tx_edfa
              edp_enable = True
              edp_current = 75  # [mA]
              edp_min_current = 0  # [mA]
              edp_max_current = 100  # [mA]

          class EdfaCW:
              # variable name prefixes are for auto_config
              # effective parameters represent this variable as rx_edfa
              edc_enable = True
              edc_current = 50  # [mA]
              edc_min_current = 0  # [mA]
              edc_max_current = 70  # [mA]

          class ICR:
              # variable name prefixes are for auto_config
              # effective parameters represent these values in [V] units
              icr_enable = True
              icr_gain = 100  # [0.01 V]
              icr_min_gain = 0  # [0.01 V]
              icr_max_gain = 200  # [0.01 V]

          class Raman:
              # variable name prefixes are for auto_config
              # effective parameters represent these values in [mA] units
              raman_enable = False
              raman_current = 0  # [0.1 mA]
              raman_min_current = 0  # [0.1 mA]
              raman_max_current = 9000  # [0.1 mA]


      class Cluster:
          cluster_broker_uris = ['amqp://control.prismaphotonics.net']
          sleep_duration = 10
          tls_heartbeat = True

      """
      The following field 'time_zone' is to be used by the recording API.
      It determintes what timezone should be appended to new recordings in their metadata.
      """
      time_zone = 'Asia/Jerusalem'

      class Sweeper:
          write_thread_max_queue_size = 250 # Default size just to regulate memory in case of writing slowness.
      class Lifeboat:
          # service_disk_path = 'D:\\LB\\RPC'
          service_disk_path = r'C:\temp\sweep\rpc'

      class DataManager:
          service_disk_path = r'Z:\data_manager'
          init_cleanup_days_interval = 7
          data_manager_folder_allocation_mb = 2000000
          default_job_size_mb = 5000
          min_free_space_mb = 40000
          recording_file_limit_size = 100
          supported_extensions = ['prp', 'prp2', 'segy', 'gz']

      class Metrics:
          prometheus_client = 'http://localhost:9273/metrics'
          telegraf_http_input_url = 'http://localhost:39273/telegraf'
          prometheus_htaccess_username = 'prisma'
          prometheus_htaccess_password = 'pass'

      class FiberInspector:
          # by the table at the end of https://prismaphotonics.atlassian.net/l/cp/MLnjKMwc
          window_size = 80
          min_fiber_length = 3
          min_optical_signal = 27
          min_algo_signal = 31
          min_major_loss = 4.5
          max_internal_alerts = 8
          max_internal_baselines = 8

      class Notifier:
          weekly_active_time = {
              0: [{'hour': 6, 'minute': 0}, {'hour': 20, 'minute': 0}],  # Monday
              1: [{'hour': 6, 'minute': 0}, {'hour': 20, 'minute': 0}],  # Tuesday
              2: [{'hour': 6, 'minute': 0}, {'hour': 20, 'minute': 0}],  # Wednesday
              3: [{'hour': 6, 'minute': 0}, {'hour': 20, 'minute': 0}],  # Thursday
              4: [{'hour': 6, 'minute': 0}, {'hour': 20, 'minute': 0}],  # Friday
              5: [{'hour': 6, 'minute': 0}, {'hour': 20, 'minute': 0}],  # Saturday
              6: [{'hour': 6, 'minute': 0}, {'hour': 20, 'minute': 0}],  # Sunday
          }

      class Focus:
          mongo_mapper_url = 'mongodb://prisma:prisma@mongodb'
          #storage_mount_path = '/prisma/root/recordings/kuler'
          storage_mount_path = '/prisma/root/recordings/prisma-210-1057'
          k8s_mode = True
          focus_view_url = 'http://10.10.10.150'
          focus_job_template_location =f"{os.path.join(os.getenv('PRISMA_CONFIG'), 'panda', 'templates', 'job-template.yml')}"
          focus_temporary_job_storage = '/home/prisma'
          focus_fiber_recording_sw_version = "10.7" # "sw_version"
          focus_expected_dx = 4.539421081542969 # "dx"
          focus_expected_prr = 2000 # "prr"
          focus_expected_amount_of_channels = 2337  # "fast_time_pixels"
          focus_expected_fiber_start_meters = 0 # "fiber_start_meters"
          focus_expected_fiber_length_meters = 11000 # "fiber_length_meters"
          focus_expected_fiber_description = "Kuler" # "fiber_description"
          focus_debug_mode = False
          focus_amount_of_gpu_slices = 200
          focus_research_grpc_job_starting_port = 12300

      class Grpc:
          max_stream_queue_size = 10000
          channel_queues_timeout = 3
          grpc_consumption_timeout = 60

      class OTDR:
          class Reports:
              OTDR_report_loss_prominence = 9
              OTDR_report_reflection_prominence = 60
              OTDR_report_reflection_width = 10
              OTDR_report_min_loss = 0.2
              OTDR_report_min_peak_height = 1
              OTDR_report_window_size = 80
              OTDR_report_slope_min_num_of_windows = 4
              OTDR_report_noise_window_size = 20
              OTDR_report_minimum_loss_to_mark_on_plot = 0.2
